#!/usr/bin/env python3

"""Video Thumbnail Generator

Usage:
  ./generator <root_folder> <interval> <width> <height> <columns> <output_folder> [--overwrite]
  ./generator (-h | --help)
  ./generator --version

Options:
  -h --help       Show this screen.
  --version       Show version.
  <root_folder>   Root folder containing MP4 video files and subfolders.
  <interval>      Interval in seconds between frames.
  <width>         Width of each thumbnail.
  <height>        Height of each thumbnail.
  <columns>       Total number of thumbnails per line.
  <output_folder> Destination folder for output.
  --overwrite     Overwrite existing files in the destination folder.
"""

from docopt import docopt
from moviepy.editor import VideoFileClip
from PIL import Image
from collections import namedtuple
from multiprocessing import cpu_count, Queue, Process
import os
import random
import shutil
import math
import tempfile
import sys

def find_mp4_files(root_folder):
    mp4_files = []
    for dirpath, dirnames, filenames in os.walk(root_folder):
        for filename in filenames:
            if filename.lower().endswith('.mp4'):
                mp4_files.append(os.path.join(dirpath, filename))
    return mp4_files

def generate_video_thumbnails(args):
    root_folder = args['<root_folder>']
    interval = int(args['<interval>'])
    width = int(args['<width>'])
    height = int(args['<height>'])
    columns = int(args['<columns>'])
    size = (width, height)
    
    output_folder = args['<output_folder>']
    
    # Create output folder if it doesn't exist
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Check if overwrite is enabled
    overwrite = args['--overwrite']

    work_queue = Queue()
    mp4_files = find_mp4_files(root_folder)

    if not mp4_files:
        print("No MP4 files found in the specified folder or its subfolders.")
        return

    for file_path in mp4_files:
        relative_path = os.path.relpath(file_path, root_folder)
        output_path = os.path.join(output_folder, os.path.splitext(relative_path)[0] + ".png")
        output_dir = os.path.dirname(output_path)
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        work_queue.put((file_path, output_path, interval, size, columns, overwrite))

    # Determine number of processes
    parallelism = min(cpu_count() * 2 - 1, len(mp4_files))

    # Start worker processes
    processes = []
    for i in range(parallelism):
        p = Process(target=worker, args=(work_queue,))
        p.start()
        processes.append(p)

    # Block until all processes complete
    for p in processes:
        p.join()

def worker(queue):
    while True:
        try:
            work_unit = queue.get(False)
            if not work_unit:
                break
        except:
            break

        input_file, output_file, interval, size, columns, overwrite = work_unit
        file_name = os.path.basename(input_file)

        if os.path.exists(output_file) and not overwrite:
            print(f"[{file_name}] Already exists, skipping")
            continue

        try:
            with tempfile.TemporaryDirectory() as tmp_dir:
                video_file_clip = VideoFileClip(input_file)
                output_prefix = os.path.join(tmp_dir, "frame_")
                generate_frames(file_name, video_file_clip, interval, output_prefix, size)
                generate_sprite_from_frames(tmp_dir, columns, size, output_file)
                print(f"[{file_name}] Processed successfully")
        except Exception as e:
            print(f"[{file_name}] Error occurred: {str(e)}")

def generate_frames(file_name, video_file_clip, interval, output_prefix, size):
    duration = video_file_clip.duration
    frame_count = 0
    total_frames = int(duration / interval)
    for i in range(0, int(duration), interval):
        frame_count += 1
        print(f"[{file_name}] Extracting frame {frame_count}/{total_frames}")
        extract_frame(video_file_clip, i, output_prefix, size, frame_count)

def extract_frame(video_file_clip, moment, output_prefix, size, frame_count):
    output = output_prefix + f"{frame_count:05d}.png"
    video_file_clip.save_frame(output, t=int(moment))
    resize_frame(output, size)

def resize_frame(filename, size):
    image = Image.open(filename)
    image = image.resize(size, Image.Resampling.LANCZOS)
    image.save(filename)

def generate_sprite_from_frames(frames_path, columns, size, output):
    frames_map = sorted([f for f in os.listdir(frames_path) if f.endswith('.png')])
    if not frames_map:
        raise ValueError("No frames were generated")

    rows = math.ceil(len(frames_map) / columns)
    master_width = size[0] * columns
    master_height = size[1] * rows

    try:
        final_image = Image.new(mode='RGBA', size=(master_width, master_height), color=(0, 0, 0, 0))
    except IOError:
        final_image = Image.new(mode='RGB', size=(master_width, master_height))

    for index, frame in enumerate(frames_map):
        with Image.open(os.path.join(frames_path, frame)) as image:
            location_x = (index % columns) * size[0]
            location_y = (index // columns) * size[1]
            final_image.paste(image, (location_x, location_y))

    final_image.save(output)

if __name__ == "__main__":
    arguments = docopt(__doc__, version='0.0.2')
    generate_video_thumbnails(arguments)